<?xml version="1.0"?>
<status>

  <developers>
    <person name="Kris Jurka"    email="books@ejurka.com"     id="jurka" />
    <person name="Oliver Jowett" email="oliver@opencloud.com" id="oliver" />
    <person name="Dave Cramer"   email="pg@fastcrypt.com"     id="davec" />
    <person name="Barry Lind"    email="blind@xythos.com"     id="blind" />
  </developers>

  <changes>
      <!-- Some action types have associated images. By default, images are
      defined for 'add', 'fix', 'remove', 'update' and 'hack'. If you add
      src/documentation/resources/images/<foo>.jpg images, these will
      automatically be used for entries of type <foo>. -->

    <release version="dev600" date="2007-04-18">
      <action dev="jurka" type="fix" due-to="Ravi Periasmy">
        Statement.getTime, .getDate, and .getTimestamp methods which
	are passed a Calendar object were rotating the timezone in the
	wrong direction.  Rewrite this code to use the existing
	TimestampUtils methods to match the working code in ResultSets.
      </action>
      <action dev="jurka" type="add" due-to="Bojan Skaljac">
        Initial Serbian translation.
      </action>
      <action dev="jurka" type="fix" due-to="Leon Do">
        Produce the timezone that we send to the server in the same
        format that we can parse.  This is important for updatable
        ResultSets as we must be able to parse the format we produce.
      </action>
      <action dev="jurka" type="fix">
        Make the default object return type of oids to be a Java Long
	instead of Integer because oids are unsigned and exceed the
        range of Integer.
      </action>
      <action dev="jurka" type="fix">
        Make Large Object handling work when the oid counter has exceeded
        Integer.MAX_VALUE by handling oids as longs.
      </action>
      <action dev="jurka" type="add">
        Implement the JDBC4 Blob/Clob free method.
      </action>
      <action dev="jurka" type="fix">
        Allow multiple streams on the same large object to be used in
        parallel by assigning each stream its own large object handle.
      </action>
      <action dev="jurka" type="fix" due-to="Heikki Linnakangas">
	Fix persistence of XA datasources.
        PGObjectFactory wasn't aware of PGXADataSource and can't be
        because of the requirements for different build versions.  Add a
        new PGXADataSourceFactory to provide this functionality.
      </action>
      <action dev="jurka" type="add" due-to="Stephen Denne, Nelson Arape">
        Improve performance of PGStream code by reducing function call
	and casting overhead.
      </action>
      <action dev="davec" type="fix" due-to="Guillaume Smet">
	Close ref cursors immediately after fetching the rows.  In long
	running transactions leaving them open results in memory
	consumption.
      </action>
      <action dev="jurka" type="fix">
        Fix the error message generated by a CallableStatement not getting
	results that match the registered out parameters to report the
	correct parameter position.
      </action>
      <action dev="jurka" type="add">
        Replace ad-hoc and missing identifier escaping with a utility
	method.
      </action>
      <action dev="jurka" type="add">
	Implement large object truncation for 8.3 servers.  Currently we
        truncate Clobs with a byte length instead of a character length
        until we figure out how to represent character sets in Clobs.
      </action>
      <action dev="jurka" type="fix">
	Interval formatting didn't work for negative seconds values greater
	than -1.  It would format it as -.5, but interval input doesn't
	accept this, so write it as -0.5 instead.
      </action>
      <action dev="jurka" type="fix" due-to="Valery Meshkov">
	Change DatabaseMetaData.getSearchStringEscape to always return "\\"
        instead of "\\\\".  Previously it was assuming that it would be
        fed directly into a query and it needed to escape itself for the
        backend's input parser.  This doesn't work for things like
        PreparedStatement parameters or DatabaseMetaData methods that
        take patterns.
      </action>
      <action dev="jurka" type="add">
	Add methods to PGInterval to combine and scale intervals.
      </action>
      <action dev="jurka" type="fix">
        Remove mapping of the rand escape function.  Due to the change in
        the setseed backend function return value from int to void we
        cannot implement in the same way as for previous server versions.
        Also per discussion the old implementation looked wrong and the
        spec gives us very little insight into what it should actually
        do.
      </action>
      <action dev="jurka" type="fix" due-to="Vasylenko">
        Allow updatable ResultSets to update arrays. 
      </action>
      <action dev="jurka" type="fix">
        In an error message reporting an unparseable timestamp value the code
        was trying to put the unparseable portion into the error message,
        but used the wrong variable to get the correct length.
      </action>
      <action dev="jurka" type="fix">
        Parse timezones that have offsets in seconds.  8.2 servers now return
        this information so we must be able to handle it.
      </action>
      <action dev="jurka" type="add" due-to="Frank Spies">
        Save JUnit output into files so they can be processed
        by tools.  The given example is the Hudson CI tool, but it's
        likely that other tools also need a file to work on.
      </action>
      <action dev="jurka" type="add">
        Implement ResultSet.updateArray by simply mapping it to
	updateObject which now works for arrays.
      </action>
    </release>

    <release version="8.2-505" date="2007-04-18">
      <action dev="jurka" type="fix" due-to="Ravi Periasmy">
        Statement.getTime, .getDate, and .getTimestamp methods which
	are passed a Calendar object were rotating the timezone in the
	wrong direction.  Rewrite this code to use the existing
	TimestampUtils methods to match the working code in ResultSets.
      </action>
      <action dev="jurka" type="add" due-to="Bojan Skaljac">
        Initial Serbian translation.
      </action>
      <action dev="jurka" type="fix" due-to="Leon Do">
        Produce the timezone that we send to the server in the same
        format that we can parse.  This is important for updatable
        ResultSets as we must be able to parse the format we produce.
      </action>
      <action dev="jurka" type="fix">
        Make Large Object handling work when the oid counter has exceeded
        Integer.MAX_VALUE by handling oids as longs.
      </action>
      <action dev="jurka" type="fix" due-to="Heikki Linnakangas">
	Fix persistence of XA datasources.
        PGObjectFactory wasn't aware of PGXADataSource and can't be
        because of the requirements for different build versions.  Add a
        new PGXADataSourceFactory to provide this functionality.
      </action>
      <action dev="jurka" type="fix">
        Fix the error message generated by a CallableStatement not getting
	results that match the registered out parameters to report the
	correct parameter position.
      </action>
      <action dev="jurka" type="fix">
	Interval formatting didn't work for negative seconds values greater
	than -1.  It would format it as -.5, but interval input doesn't
	accept this, so write it as -0.5 instead.
      </action>
      <action dev="jurka" type="fix" due-to="Valery Meshkov">
	Change DatabaseMetaData.getSearchStringEscape to always return "\\"
        instead of "\\\\".  Previously it was assuming that it would be
        fed directly into a query and it needed to escape itself for the
        backend's input parser.  This doesn't work for things like
        PreparedStatement parameters or DatabaseMetaData methods that
        take patterns.
      </action>
      <action dev="jurka" type="fix" due-to="Vasylenko">
        Allow updatable ResultSets to update arrays. 
      </action>
      <action dev="jurka" type="fix">
        In an error message reporting an unparseable timestamp value the code
        was trying to put the unparseable portion into the error message,
        but used the wrong variable to get the correct length.
      </action>
      <action dev="jurka" type="fix">
        Parse timezones that have offsets in seconds.  8.2 servers now return
        this information so we must be able to handle it.
      </action>
      <action dev="jurka" type="add">
        Implement ResultSet.updateArray by simply mapping it to
	updateObject which now works for arrays.
      </action>
    </release>

    <release version="8.1-409" date="2007-04-18">
      <action dev="jurka" type="fix" due-to="Ravi Periasmy">
        Statement.getTime, .getDate, and .getTimestamp methods which
	are passed a Calendar object were rotating the timezone in the
	wrong direction.  Rewrite this code to use the existing
	TimestampUtils methods to match the working code in ResultSets.
      </action>
      <action dev="jurka" type="fix" due-to="Leon Do">
        Produce the timezone that we send to the server in the same
        format that we can parse.  This is important for updatable
        ResultSets as we must be able to parse the format we produce.
      </action>
      <action dev="jurka" type="fix" due-to="Heikki Linnakangas">
	Fix persistence of XA datasources.
        PGObjectFactory wasn't aware of PGXADataSource and can't be
        because of the requirements for different build versions.  Add a
        new PGXADataSourceFactory to provide this functionality.
      </action>
      <action dev="jurka" type="fix">
        Fix the error message generated by a CallableStatement not getting
	results that match the registered out parameters to report the
	correct parameter position.
      </action>
      <action dev="jurka" type="fix">
	Interval formatting didn't work for negative seconds values greater
	than -1.  It would format it as -.5, but interval input doesn't
	accept this, so write it as -0.5 instead.
      </action>
      <action dev="jurka" type="fix" due-to="Vasylenko">
        Allow updatable ResultSets to update arrays. 
      </action>
      <action dev="jurka" type="fix">
        In an error message reporting an unparseable timestamp value the code
        was trying to put the unparseable portion into the error message,
        but used the wrong variable to get the correct length.
      </action>
      <action dev="jurka" type="add">
        Implement ResultSet.updateArray by simply mapping it to
	updateObject which now works for arrays.
      </action>
    </release>

    <release version="8.0-319" date="2007-04-18">
      <action dev="jurka" type="fix" due-to="Leon Do">
        Produce the timezone that we send to the server in the same
        format that we can parse.  This is important for updatable
        ResultSets as we must be able to parse the format we produce.
      </action>
      <action dev="jurka" type="fix" due-to="Vasylenko">
        Allow updatable ResultSets to update arrays. 
      </action>
      <action dev="jurka" type="add">
        Implement ResultSet.updateArray by simply mapping it to
	updateObject which now works for arrays.
      </action>
    </release>

    <release version="8.2-504" date="2006-12-01">
      <action dev="jurka" type="add">
        Make the driver build under the 1.6 JDK.
      </action>
      <action dev="jurka" type="update" due-to="Giuseppe Sacco">
        Italian translation update.
      </action>
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian Portuguese translation update.
      </action>
      <action dev="jurka" type="fix" due-to="Gilles Rayrat">
        When issuing multiple queries on
        one statement the driver was not clearing some intermediate state
        between executions.  When an update, insert, or delete followed a
        select, the select's results were still available and would be
        returned instead of the non-query's affected row count.
      </action>
      <action dev="jurka" type="fix" due-to="Akira Sato">
        When the
        driver asks the server to resolve a type the resolved type is
        stored in the SimpleQuery object.  When the statement is executed
        again the driver determines whether the existing types match or
        if it needs to be reprepared by comparing the current Statement's
        settings with the SimpleQuery.  The Statement will have the
        unspecified oid while the SimpleQuery will have the resolved oid,
        so there will not be a match and the statement will needlessly be
        reprepared.  Allow an unspecified oid to match any resolved type.
      </action>
      <action dev="jurka" type="fix">
        When creating a ResultSet from a refcursor, respect the creating
        ResultSet's scollability setting.  The way the ResultSet is
        created means that it will always be scrollable anyway, so
        there's no downside.  We cannot support updatable refcursor
        ResultSets until we get updatable cursors.
      </action>
      <action dev="jurka" type="fix">
        Fix a bug in function escape
        processing.  When dealing with an invalid escape the code
        attempted to read until it hit the escape end and press on, but
        it forgot to increment its position counter.  This lead to an
        infinite loop that eventually resulted in an out of memory error.
      </action>
      <action dev="jurka" type="fix">
        Update the documentation to reflect the fact that the
        default prepareThreshold is five, not zero.
      </action>
      <action dev="jurka" type="add" due-to="Luis Vilar Flores">
        Reduce memory usage when bytea
        data is retrieved from ResultSet.getBytes by using an extra pass
        over the data to determine the output buffer size ahead of time.
      </action>
      <action dev="jurka" type="add" due-to="Mikko Tiihonen">
        Improve performance when
        retrieving large ResultSets consisting of Strings, ints, and
        longs.  Improve String retrieval by avoiding a copy from the
        network buffer and using it directly to create the String
        instance.  Improve integer retrieval by using a custom byte to
        number conversion that uses knowledge of the encoding to avoid
        creating an intermediate String representation first.
      </action>
      <action dev="jurka" type="add" due-to="Michael Paesold">
        Add support for parsing dollar quotes and comments.
      </action>
      <action dev="jurka" type="fix">
        Improve handling of incorrectly written user code using
        CallableStatements.  Defend against trying to retrieve data
        before the statement is executed.
      </action>
      <action dev="jurka" type="fix">
        Adjust precision returned by meta data methods to reflect the
        latest javadocs additional documentation.
      </action>
      <action dev="jurka" type="fix">
        Correct error message in CallableStatement to identify the mismatch
        with the registered return type.
      </action>
      <action dev="jurka" type="add" due-to="Eberhard Schulte">
        Improve the
        performance of getBoolean for false values by explicitly checking
        for false rather than generating a NumberFormatException.
      </action>
      <action dev="jurka" type="fix" due-to="Michael Paesold">
        Correct escaping of named savepoints which follow identifier, not
        literal rules.
      </action>
      <action dev="jurka" type="add" due-to="Michael Paesold">
        Make the driver operate correctly
        when standard_conforming_strings is on.
      </action>
      <action dev="jurka" type="fix" due-to="Allan Saddi">
        XAConnections default autocommit state
        should be true.  The driver was previously setting autocommit to
        false and assuming it would stay that way.  This caused two
        problems.  First, some applications expected to be able to issue
        local autocommit transactions prior to begin().  Second, some TMs
        (Geronimo) set the autocommit state to true themselves, which
        causes problems as the driver did not expect it to be changed.
        This patch correctly disables and enables autocommit around
        start, prepare, commit, and rollback methods.
      </action>
      <action dev="jurka" type="add" due-to="Jan de Visser and Heikki Linnakangas">
        Allow XAResource.start with TMJOIN in a limited set of circumstances
        to work with WebLogic.  We allow TMJOIN only if the resource was
        previously ended and the Xid is the same as the current Xid.
      </action>
    </release>

    <release version="8.1-408" date="2006-12-01">
      <action dev="jurka" type="update" due-to="Giuseppe Sacco">
        Italian translation update.
      </action>
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian Portuguese translation update.
      </action>
      <action dev="jurka" type="fix" due-to="Gilles Rayrat">
        When issuing multiple queries on
        one statement the driver was not clearing some intermediate state
        between executions.  When an update, insert, or delete followed a
        select, the select's results were still available and would be
        returned instead of the non-query's affected row count.
      </action>
      <action dev="jurka" type="fix" due-to="Akira Sato">
        When the
        driver asks the server to resolve a type the resolved type is
        stored in the SimpleQuery object.  When the statement is executed
        again the driver determines whether the existing types match or
        if it needs to be reprepared by comparing the current Statement's
        settings with the SimpleQuery.  The Statement will have the
        unspecified oid while the SimpleQuery will have the resolved oid,
        so there will not be a match and the statement will needlessly be
        reprepared.  Allow an unspecified oid to match any resolved type.
      </action>
      <action dev="jurka" type="fix">
        When creating a ResultSet from a refcursor, respect the creating
        ResultSet's scollability setting.  The way the ResultSet is
        created means that it will always be scrollable anyway, so
        there's no downside.  We cannot support updatable refcursor
        ResultSets until we get updatable cursors.
      </action>
      <action dev="jurka" type="fix">
        Fix a bug in function escape
        processing.  When dealing with an invalid escape the code
        attempted to read until it hit the escape end and press on, but
        it forgot to increment its position counter.  This lead to an
        infinite loop that eventually resulted in an out of memory error.
      </action>
      <action dev="jurka" type="fix">
        Update the documentation to reflect the fact that the
        default prepareThreshold is five, not zero.
      </action>
      <action dev="jurka" type="fix">
        Correct error message in CallableStatement to identify the mismatch
        with the registered return type.
      </action>
      <action dev="jurka" type="fix" due-to="Michael Paesold">
        Correct escaping of named savepoints which follow identifier, not
        literal rules.
      </action>
    </release>

    <release version="8.0-318" date="2006-12-01">
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian Portuguese translation update.
      </action>
      <action dev="jurka" type="fix" due-to="Gilles Rayrat">
        When issuing multiple queries on
        one statement the driver was not clearing some intermediate state
        between executions.  When an update, insert, or delete followed a
        select, the select's results were still available and would be
        returned instead of the non-query's affected row count.
      </action>
      <action dev="jurka" type="fix" due-to="Akira Sato">
        When the
        driver asks the server to resolve a type the resolved type is
        stored in the SimpleQuery object.  When the statement is executed
        again the driver determines whether the existing types match or
        if it needs to be reprepared by comparing the current Statement's
        settings with the SimpleQuery.  The Statement will have the
        unspecified oid while the SimpleQuery will have the resolved oid,
        so there will not be a match and the statement will needlessly be
        reprepared.  Allow an unspecified oid to match any resolved type.
      </action>
      <action dev="jurka" type="fix">
        When creating a ResultSet from a refcursor, respect the creating
        ResultSet's scollability setting.  The way the ResultSet is
        created means that it will always be scrollable anyway, so
        there's no downside.  We cannot support updatable refcursor
        ResultSets until we get updatable cursors.
      </action>
      <action dev="jurka" type="fix">
        Fix a bug in function escape
        processing.  When dealing with an invalid escape the code
        attempted to read until it hit the escape end and press on, but
        it forgot to increment its position counter.  This lead to an
        infinite loop that eventually resulted in an out of memory error.
      </action>
      <action dev="jurka" type="fix">
        Update the documentation to reflect the fact that the
        default prepareThreshold is five, not zero.
      </action>
      <action dev="jurka" type="fix" due-to="Michael Paesold">
        Correct escaping of named savepoints which follow identifier, not
        literal rules.
      </action>
    </release>

    <release version="dev503" date="2006-05-23">
      <action dev="jurka" type="fix">
        Using callable
        statements against older server versions (7.4 or 8.0) did not
        work because of recent changes to output parameter handling.  7.4
        and 8.0 do not support function output parameters, but they still
        must support the functions return value.  Every function must
        have either a return value or an output parameter so we force the
        minimum output parameter count to one.
      </action>
      <action dev="jurka" type="update">
        Remove documentation's claim that we don't support functions
	with out parameters.
      </action>
      <action dev="jurka" type="update" due-to="Andre Bialojahn">
        Updated German translation.
      </action>
    </release>

    <release version="8.1-407" date="2006-05-23">
      <action dev="jurka" type="fix">
        Using callable
        statements against older server versions (7.4 or 8.0) did not
        work because of recent changes to output parameter handling.  7.4
        and 8.0 do not support function output parameters, but they still
        must support the functions return value.  Every function must
        have either a return value or an output parameter so we force the
        minimum output parameter count to one.
      </action>
      <action dev="jurka" type="fix">
        When running against a 8.1+ server with protocol version 2
	we cannot handle output parameters and can only handle the
	traditional function return value.
      </action>
      <action dev="jurka" type="update">
        Remove documentation's claim that we don't support functions
	with out parameters.
      </action>
      <action dev="jurka" type="update" due-to="Andre Bialojahn">
        Updated German translation.
      </action>
    </release>

    <release version="8.0-317" date="2006-05-23">
      <action dev="jurka" type="fix" due-to="Glenn Holmer">
        A bad merge of out of memory
        detection and zero testing resulted in incorrectly handing of
        null values.
      </action>
    </release>

    <release version="dev502" date="2006-05-22">
      <action dev="davec" type="fix" due-to="Luis Londono">
        Fix a couple of bugs in CallableStatement outputs.  An oversight in
	the checking of actual results vs. what the caller specified for
	registerOutParameter was checking all register parameters against the
	first out parameter, not the parameter it actually corresponded with.

	Also with a function that has an in parameter and an out parameter,
	the out parameter will be registered at position 2, but will be
	returned in a result at position 1 because the first input parameter
	generates no output.  The driver needs to correctly map between these
	two parameter offsets.
      </action>
      <action dev="jurka" type="fix" due-to="Giuseppe Sacco">
        Error messages were not run
        through MessageFormat if it didn't have any parameters.  This was
        a problem because all error messages are written expecting to be
        run through the formatter and use two single quotes when only one
        is desired in the output.  Without being run through the
	formatter the two quotes appeared in the output.
      </action>
      <action dev="jurka" type="update" due-to="Andre Bialojahn">
        Updated German transalation.
      </action>
      <action dev="jurka" type="fix" due-to="Till Toenges">
        Add some more synchronization to the
        TypeInfoCache.  We need synchronization around the
        PreparedStatements because they may not be used by two threads at
        the same time.  Additional synchronization is applied to the maps
        to ensure that they are in sync with each other.  Make
        _pgNameToSQLType static.
      </action>
      <action dev="jurka" type="add">
        Add a protocolVersion
        parameter to the test suite runner.  This allows testing the V2
        protocol path on newer server versions.  Also fix tests that were
        incorrectly using the server version for protocol version
        dependent results.  To give it a try, just add protocolVersion=2
        to your build.local.properties.
      </action>
      <action dev="jurka" type="fix" due-to="David Blasby">
        An OutOfMemoryError during fe&lt;-&gt;be communication leaves the
        protocol in an unknown state.  This prevents the caller from even
        closing the connection.  Checking every allocation is a lot of
        work, but the most likely error location is going to be when
        receiving large result sets.  Put in checks around receiving row
        data to detect memory exhaustion, keep the protocol in a known
        state, and report the failure back to the user.
      </action>
      <action dev="jurka" type="fix" due-to="Oliver Jowett">
        When we're unable to parse a timestamp
        value, the error message should print out the bad value.  It was
        printing a char array which showed up as a useless [C@xxxx.
      </action>
      <action dev="jurka" type="fix">
        gij/gcj has some JDK1.5 classes in it, but it only supports
        JDK1.4 as the default source level.  This confuses older ant
        versions and our build script tries to compile a JDK1.5 version.
        Instead of letting ant detect the java version, let the jvm tell
        us that itself using java.specification.version as suggested by
        Heikki Linnakangas.  Also put in a check for a JDK1.6 compile
        attempt and bail out with an explanatory unsupported error
        message instead of just failing at some random point.
      </action>
      <action dev="jurka" type="fix" due-to="Peter Eisentraut">
        When a
        prepared statement uses different parameter types than what the
        statement was originally prepared for, the driver must replan the
        query for the new types.  When doing this in batches the driver
        was not correctly freeing old plans.

        To cleanup prepared statements the driver records a reference to
        a query object in response to the ParseComplete message.  The
        problem in this case was that since the driver sends multiple
        Parse messages before a Sync, when the driver receives the first
        ParseComplete message the query object now contains a reference
        to the latest parsed statement, not the first. So it was only
        cleaning up the last parsed statement not all of them.
      </action>
      <action dev="jurka" type="fix" due-to="Niels Beekman">
        When the
        Connection retrieved from XAConnection.getConnection() is closed
        we do not want to rollback the transaction because the underlying
        connection is not closed and the transaction is being managed by
        the XAResource, not the Connection.
      </action>
      <action dev="davec" type="add" due-to="Xavier Poinsard">
        Add escape sequences for timestamp addition and difference.
      </action>
    </release>

    <release version="8.1-406" date="2006-05-22">
      <action dev="davec" type="fix" due-to="Luis Londono">
        Fix a couple of bugs in CallableStatement outputs.  An oversight in
	the checking of actual results vs. what the caller specified for
	registerOutParameter was checking all register parameters against the
	first out parameter, not the parameter it actually corresponded with.

	Also with a function that has an in parameter and an out parameter,
	the out parameter will be registered at position 2, but will be
	returned in a result at position 1 because the first input parameter
	generates no output.  The driver needs to correctly map between these
	two parameter offsets.
      </action>
      <action dev="jurka" type="fix" due-to="Giuseppe Sacco">
        Error messages were not run
        through MessageFormat if it didn't have any parameters.  This was
        a problem because all error messages are written expecting to be
        run through the formatter and use two single quotes when only one
        is desired in the output.  Without being run through the
	formatter the two quotes appeared in the output.
      </action>
      <action dev="jurka" type="update" due-to="Andre Bialojahn">
        Updated German transalation.
      </action>
      <action dev="jurka" type="fix" due-to="Till Toenges">
        Add some more synchronization to the
        TypeInfoCache.  We need synchronization around the
        PreparedStatements because they may not be used by two threads at
        the same time.  Additional synchronization is applied to the maps
        to ensure that they are in sync with each other.  Make
        _pgNameToSQLType static.
      </action>
      <action dev="jurka" type="fix" due-to="David Blasby">
        An OutOfMemoryError during fe&lt;-&gt;be communication leaves the
        protocol in an unknown state.  This prevents the caller from even
        closing the connection.  Checking every allocation is a lot of
        work, but the most likely error location is going to be when
        receiving large result sets.  Put in checks around receiving row
        data to detect memory exhaustion, keep the protocol in a known
        state, and report the failure back to the user.
      </action>
      <action dev="jurka" type="fix" due-to="Oliver Jowett">
        When we're unable to parse a timestamp
        value, the error message should print out the bad value.  It was
        printing a char array which showed up as a useless [C@xxxx.
      </action>
      <action dev="jurka" type="fix">
        gij/gcj has some JDK1.5 classes in it, but it only supports
        JDK1.4 as the default source level.  This confuses older ant
        versions and our build script tries to compile a JDK1.5 version.
        Instead of letting ant detect the java version, let the jvm tell
        us that itself using java.specification.version as suggested by
        Heikki Linnakangas.  Also put in a check for a JDK1.6 compile
        attempt and bail out with an explanatory unsupported error
        message instead of just failing at some random point.
      </action>
      <action dev="jurka" type="fix" due-to="Peter Eisentraut">
        When a
        prepared statement uses different parameter types than what the
        statement was originally prepared for, the driver must replan the
        query for the new types.  When doing this in batches the driver
        was not correctly freeing old plans.

        To cleanup prepared statements the driver records a reference to
        a query object in response to the ParseComplete message.  The
        problem in this case was that since the driver sends multiple
        Parse messages before a Sync, when the driver receives the first
        ParseComplete message the query object now contains a reference
        to the latest parsed statement, not the first. So it was only
        cleaning up the last parsed statement not all of them.
      </action>
      <action dev="jurka" type="fix" due-to="Niels Beekman">
        When the
        Connection retrieved from XAConnection.getConnection() is closed
        we do not want to rollback the transaction because the underlying
        connection is not closed and the transaction is being managed by
        the XAResource, not the Connection.
      </action>
    </release>

    <release version="8.0-316" date="2006-05-22">
      <action dev="jurka" type="fix" due-to="Giuseppe Sacco">
        Error messages were not run
        through MessageFormat if it didn't have any parameters.  This was
        a problem because all error messages are written expecting to be
        run through the formatter and use two single quotes when only one
        is desired in the output.  Without being run through the
	formatter the two quotes appeared in the output.
      </action>
      <action dev="jurka" type="fix" due-to="David Blasby">
        An OutOfMemoryError during fe&lt;-&gt;be communication leaves the
        protocol in an unknown state.  This prevents the caller from even
        closing the connection.  Checking every allocation is a lot of
        work, but the most likely error location is going to be when
        receiving large result sets.  Put in checks around receiving row
        data to detect memory exhaustion, keep the protocol in a known
        state, and report the failure back to the user.
      </action>
      <action dev="jurka" type="fix">
        gij/gcj has some JDK1.5 classes in it, but it only supports
        JDK1.4 as the default source level.  This confuses older ant
        versions and our build script tries to compile a JDK1.5 version.
        Instead of letting ant detect the java version, let the jvm tell
        us that itself using java.specification.version as suggested by
        Heikki Linnakangas.  Also put in a check for a JDK1.6 compile
        attempt and bail out with an explanatory unsupported error
        message instead of just failing at some random point.
      </action>
      <action dev="jurka" type="fix" due-to="Peter Eisentraut">
        When a
        prepared statement uses different parameter types than what the
        statement was originally prepared for, the driver must replan the
        query for the new types.  When doing this in batches the driver
        was not correctly freeing old plans.

        To cleanup prepared statements the driver records a reference to
        a query object in response to the ParseComplete message.  The
        problem in this case was that since the driver sends multiple
        Parse messages before a Sync, when the driver receives the first
        ParseComplete message the query object now contains a reference
        to the latest parsed statement, not the first. So it was only
        cleaning up the last parsed statement not all of them.
      </action>
    </release>

    <release version="dev501" date="2006-02-09">
      <action dev="jurka" type="fix" due-to="Oliver Jowett">
        Statement.cancel was prone to race conditions even with a single
        threaded client.  It would fire off a cancel message without
        waiting for an acknowledgement of its success.  This resulted in
        future queries being cancelled when the cancel message was
        received by the backend.  Ensure we get an EOF from the server
        before returning from the cancel call.  This still does nothing
	about multi-threaded race conditions.
      </action>
      <action dev="jurka" type="update">
        Remove the length argument from Field constructor for manually
	created Fields.  The length was inconsistently and incorrectly
	used and it is of little to us, so don't clutter things up by
	requiring one.
      </action>
      <action dev="jurka" type="add">
        Unify type metadata functions in TypeInfoCache.  Previously
	ResultSetMetaData and DatabaseMetaData had their own
	inconsistent versions of these.  Do not use pg_type.typlen when
	calculating display sizes.  The backend storage size is unlikely
	to relate to the textual display size of a datatype.
	Add information for some more types interval, bit, varbit and do
        some recalculation of the display sizes for numeric, time, and
        timestamp datetypes.
      </action>
      <action dev="jurka" type="update" due-to="Giuseppe Sacco">
        Italian translation updates.
      </action>
      <action dev="jurka" type="add" due-to="Gunnar Stefansson">
        Update getObject and getArray methods that take a map to only
	bail out with a not implemented exception if the supplied map
	is not null and not empty.  Apparently Sun's WebRowSet
	implementation passes empty Maps to these methods.
      </action>
      <action dev="davec" type="fix">
        Fix the parameter indexing on CallableStatements that do not
	return any parameters.
      </action>
      <action dev="jurka" type="fix">
        The V2 protocol wasn't correctly handling EmptyQuery messages.
	It expected a four byte message length after the EmptyQuery
	message, but there is only a single null byte sent by the backend.
      </action>
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian Portuguese translation updates.
      </action>
      <action dev="jurka" type="fix" due-to="Senden Kris">
        When performing replace processing we must continue processing
	until we hit the end of a user supplied query, not just once
	we've detected the end of a valid query.  Consider the example:
	SELECT a FROM t WHERE (1>0)) ORDER BY a; We must send the whole
	query to the backend, not just the section before the last
	closing parenthesis.
      </action>
      <action dev="jurka" type="fix" due-to="Paolo Predonzani">
        escapeQuotes() in DatabaseMetaData was not correctly handling
	backslashes which would result in incorrect searches and has the
	potential for a SQL injection attack.
      </action>
      <action dev="jurka" type="fix" due-to="Till Toenges">
        The TypeInfoCache had a static Map for the pg
	type name to java.sql.Types conversion, but it was being
	reinitialized for each new Connection.  Even though its content
	is static make this an instance variable for simplicity.
      </action>
    </release>

    <release version="8.1-405" date="2006-02-09">
      <action dev="jurka" type="fix">
	Correct the display size calculations for numeric data.  Don't
        add precision and scale because scale is just a subset of
        precision.
      </action>
      <action dev="jurka" type="fix" due-to="Thomas Kellerer">
        DatabaseMetaData.getTables should return all table type if passed
        null as for the types array.  It was previously returning only
        those tables that psql's \d command would for a null type filter.
      </action>
      <action dev="jurka" type="fix" due-to="Oliver Jowett">
        Statement.cancel was prone to race conditions even with a single
        threaded client.  It would fire off a cancel message without
        waiting for an acknowledgement of its success.  This resulted in
        future queries being cancelled when the cancel message was
        received by the backend.  Ensure we get an EOF from the server
        before returning from the cancel call.  This still does nothing
	about multi-threaded race conditions.
      </action>
      <action dev="jurka">
         Add scale information for time/timestamp/interval to
         DatabaseMetaData.getColumns.  Include knowledge of interval in
         ResultSetMetaData.
      </action>
      <action dev="jurka" type="update" due-to="Giuseppe Sacco">
        Italian translation updates.
      </action>
      <action dev="jurka" type="add" due-to="Gunnar Stefansson">
        Update getObject and getArray methods that take a map to only
	bail out with a not implemented exception if the supplied map
	is not null and not empty.  Apparently Sun's WebRowSet
	implementation passes empty Maps to these methods.
      </action>
      <action dev="davec" type="fix">
        Fix the parameter indexing on CallableStatements that do not
	return any parameters.
      </action>
      <action dev="jurka" type="fix">
        The V2 protocol wasn't correctly handling EmptyQuery messages.
	It expected a four byte message length after the EmptyQuery
	message, but there is only a single null byte sent by the backend.
      </action>
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian Portuguese translation updates.
      </action>
      <action dev="jurka" type="fix" due-to="Senden Kris">
        When performing replace processing we must continue processing
	until we hit the end of a user supplied query, not just once
	we've detected the end of a valid query.  Consider the example:
	SELECT a FROM t WHERE (1>0)) ORDER BY a; We must send the whole
	query to the backend, not just the section before the last
	closing parenthesis.
      </action>
      <action dev="jurka" type="fix" due-to="Paolo Predonzani">
        escapeQuotes() in DatabaseMetaData was not correctly handling
	backslashes which would result in incorrect searches and has the
	potential for a SQL injection attack.
      </action>
      <action dev="jurka" type="fix" due-to="Till Toenges">
        The TypeInfoCache had a static Map for the pg
	type name to java.sql.Types conversion, but it was being
	reinitialized for each new Connection.  Even though its content
	is static make this an instance variable for simplicity.
      </action>
    </release>

    <release version="8.0-315" date="2006-02-09">
      <action dev="jurka" type="fix">
	Correct the display size calculations for numeric data.  Don't
        add precision and scale because scale is just a subset of
        precision.
      </action>
      <action dev="jurka" type="fix" due-to="Thomas Kellerer">
        DatabaseMetaData.getTables should return all table type if passed
        null as for the types array.  It was previously returning only
        those tables that psql's \d command would for a null type filter.
      </action>
      <action dev="jurka" type="fix" due-to="Oliver Jowett">
        Statement.cancel was prone to race conditions even with a single
        threaded client.  It would fire off a cancel message without
        waiting for an acknowledgement of its success.  This resulted in
        future queries being cancelled when the cancel message was
        received by the backend.  Ensure we get an EOF from the server
        before returning from the cancel call.  This still does nothing
	about multi-threaded race conditions.
      </action>
      <action dev="jurka">
         Add scale information for time/timestamp/interval to
         DatabaseMetaData.getColumns.  Include knowledge of interval in
         ResultSetMetaData.
      </action>
      <action dev="jurka" type="add" due-to="Gunnar Stefansson">
        Update getObject and getArray methods that take a map to only
	bail out with a not implemented exception if the supplied map
	is not null and not empty.  Apparently Sun's WebRowSet
	implementation passes empty Maps to these methods.
      </action>
      <action dev="jurka" type="fix">
        The V2 protocol wasn't correctly handling EmptyQuery messages.
	It expected a four byte message length after the EmptyQuery
	message, but there is only a single null byte sent by the backend.
      </action>
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian Portuguese translation updates.
      </action>
      <action dev="jurka" type="fix" due-to="Senden Kris">
        When performing replace processing we must continue processing
	until we hit the end of a user supplied query, not just once
	we've detected the end of a valid query.  Consider the example:
	SELECT a FROM t WHERE (1>0)) ORDER BY a; We must send the whole
	query to the backend, not just the section before the last
	closing parenthesis.
      </action>
      <action dev="jurka" type="fix" due-to="Paolo Predonzani">
        escapeQuotes() in DatabaseMetaData was not correctly handling
	backslashes which would result in incorrect searches and has the
	potential for a SQL injection attack.
      </action>
    </release>

    <release version="dev500" date="2005-11-29">
      <action dev="jurka" type="add" due-to="rupa">
        Add a URL parameter to enable logging of Connections which are
	finalized, but not closed.  This will help people debug leaks.
      </action>
      <action dev="jurka" type="fix">
        Adjust ResultSetMetaData.getColumnDisplaySize to return
        Integer.MAX_VALUE instead of -1 for variable length fields.
      </action>
      <action dev="jurka" type="fix">
	Correct the display size calculations for numeric data.  Don't
        add precision and scale because scale is just a subset of
        precision.
      </action>
      <action dev="oliver" type="update">
        Strip out call
        tracing debugging from DatabaseMetaData -- it is only half there,
        and it isn't really much use for debugging the driver. There are
        better approaches for tracing application calls into the driver,
        e.g. JTrace.  Update comments.  Update what the metadata claims
	in a couple of places: getMaxStatements() returns 0 -- we are only
	limited by heap size, not by e.g. a hard limit on the number of
	simultaneous statements on the DB side - supportsMultipleResultSets()
	returns true -- we support multiple results from execute(), e.g.
	multiple SELECT statements in one query.
      </action>
      <action dev="oliver" type="update">
        Debug logging overhaul:
        Support for setting loglevel when running tests.  Tests log to a
        separate file to avoid making ant run out of heap.  Misc test
        tweaks to play nicely with logging.
        Add a Logger class that handles logging a per-connection ID and
	timestamp on each log line. There is one Logger instance per
	Connection, and one for the Driver itself.
        Rearrange per-connection initialization of log levels so it only
        affects logging on that one particular connection. Default log
        levels are taken from whatever is specified in the defaults
        property file, or the current driver-wide loglevel if no default
	is present. The driver-wide log level is also take from the
	default property file unless explicitly overridden by
	Driver.setLogLevel().
      </action>
      <action dev="oliver" type="add">
         Add a new parameter 'stringtype' (values 'varchar' or 'unspecified')
	 to control how parameters set via setString() are bound.
	 Fix V3 parameter logic so that prepared statements are not reused
	 when a non-NULL UNSPECIFIED parameter is set over the top of a
	 previous parameter.
      </action>
      <action dev="oliver" type="update" due-to="Kevin Grittner">
        Break most of AbstractJdbc2ResultSet.findColumn out into a separate
        findColumnIndex() method that does not throw if the column isn't
        found.  Use that method directly in isUpdateable() when looking
        for the OID column to avoid creating/throwing/catching/discarding
	an exception unnecessarily.  Clean up redundant try/catch and
	unnecessary nesting in updateRow().
      </action>
      <action dev="jurka" type="fix" due-to="Thomas Kellerer">
        DatabaseMetaData.getTables should return all table type if passed
        null as for the types array.  It was previously returning only
        those tables that psql's \d command would for a null type filter.
      </action>
    </release>

    <release version="8.1-404" date="2005-11-06">
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian Portuguese translation updates.
      </action>
      <action dev="jurka" type="update" due-to="Nicolai Tufar">
        Turkish translation updates.
      </action>
      <action dev="jurka" type="fix">
        When formatting an interval value as text, override the system
	locale settings for DecimalFormat.  We always want to use '.'
	as the decimal separator regardless of locale because that's
	what the server expects.
      </action>
      <action dev="jurka" type="fix">
        When I added bounds checking for ResultSet.updateXXX methods, I
	accidentally removed bounds checking for getXXX methods.  This
	resulted in an ArrayIndexOutOfBoundsException being thrown instead
	of the desired SQLException.
      </action>
      <action dev="jurka" type="fix" due-to="Jolly Chen">
        The driver needs to break a statement into individual queries to
	use the V3 extended query protocol.  The parsing code did not
	recognize multiple rule actions separated by semi-colons as one
	query.
      </action>
    </release>

    <release version="8.0-314" date="2005-11-06">
      <action dev="jurka" type="fix">
        When I added bounds checking for ResultSet.updateXXX methods, I
	accidentally removed bounds checking for getXXX methods.  This
	resulted in an ArrayIndexOutOfBoundsException being thrown instead
	of the desired SQLException.
      </action>
      <action dev="jurka" type="fix" due-to="Jolly Chen">
        The driver needs to break a statement into individual queries to
	use the V3 extended query protocol.  The parsing code did not
	recognize multiple rule actions separated by semi-colons as one
	query.
      </action>
    </release>

    <release version="dev403" date="2005-10-30">
      <action dev="davec" type="update" due-to="Sergei Rogovskiy">
        Improve performance of locating placeholders in queries.
      </action>
      <action dev="davec" type="update" due-to="Ken Geis">
        Improve performance of timestamp and currency parsing.
      </action>
      <action dev="davec" type="add" due-to="Heikki Linnakangas">
        XADataSource implementation.
      </action>
      <action dev="jurka" type="update" due-to="Xavier Poinsard">
        French translation updates.
      </action>
    </release>

    <release version="404" date="2005-11-06">
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian Portuguese translation updates.
      </action>
      <action dev="jurka" type="update" due-to="Nicolai Tufar">
        Turkish translation updates.
      </action>
      <action dev="jurka" type="fix">
        When formatting an interval value as text, override the system
	locale settings for DecimalFormat.  We always want to use '.'
	as the decimal separator regardless of locale because that's
	what the server expects.
      </action>
      <action dev="jurka" type="fix">
        When I added bounds checking for ResultSet.updateXXX methods, I
	accidentally removed bounds checking for getXXX methods.  This
	resulted in an ArrayIndexOutOfBoundsException being thrown instead
	of the desired SQLException.
      </action>
      <action dev="jurka" type="fix" due-to="Jolly Chen">
        The driver needs to break a statement into individual queries to
	use the V3 extended query protocol.  The parsing code did not
	recognize multiple rule actions separated by semi-colons as one
	query.
      </action>
    </release>

    <release version="314" date="2005-11-06">
      <action dev="jurka" type="fix">
        When I added bounds checking for ResultSet.updateXXX methods, I
	accidentally removed bounds checking for getXXX methods.  This
	resulted in an ArrayIndexOutOfBoundsException being thrown instead
	of the desired SQLException.
      </action>
      <action dev="jurka" type="fix" due-to="Jolly Chen">
        The driver needs to break a statement into individual queries to
	use the V3 extended query protocol.  The parsing code did not
	recognize multiple rule actions separated by semi-colons as one
	query.
      </action>
    </release>

    <release version="dev403" date="2005-10-30">
      <action dev="davec" type="update" due-to="Sergei Rogovskiy">
        Improve performance of locating placeholders in queries.
      </action>
      <action dev="davec" type="update" due-to="Ken Geis">
        Improve performance of timestamp and currency parsing.
      </action>
      <action dev="davec" type="add" due-to="Heikki Linnakangas">
        XADataSource implementation.
      </action>
      <action dev="jurka" type="update" due-to="Xavier Poinsard">
        French translation updates.
      </action>
    </release>

    <release version="dev402" date="2005-10-04">
      <action dev="oliver" type="fix">
        Fix a multitude of timestamp, timezone, and Calendar problems
	resulting from the mismatch of Java's Timestamp object and the
	SQL specs timestamp with and without time zone datatypes.
      </action>
      <action dev="jurka" type="fix">
        getWarnings() should throw a SQLException if called on a closed
	Statement.
      </action>
      <action dev="jurka" type="fix">
        Make callable statements work again for JDK 1.5 builds.  Any code
	in the jdbc3/Jdbc3 classes also needs to get into the corresponding
	jdbc3g/Jdbc3g class.
      </action>
      <action dev="jurka" type="fix" due-to="Albe Laurenz">
        Every execution of a Statement clears the warning chain from the
	previous execution.  This was causing a memory leak by endlessly
	chaining warnings together that should have been discarded.
      </action>
      <action dev="oliver" type="fix">
        Fix updateRow() involving Date, Time, or Timestamp.
      </action>
      <action dev="jurka" type="add" due-to="Petr Dittrich">
        Initial Czech translation.
      </action>
      <action dev="jurka" type="add">
        Add the Detail: field to the default error message string.  This is
	often includes valuable information that shouldn't require adjusting
	the loglevel to receive.
      </action>
      <action dev="jurka" type="fix">
        Remove direct manipulation of org.postgresql.Driver.logDebug in
	tests for no apparent reason.
      </action>
      <action dev="jurka" type="fix">
        Adjust DatabaseMetaData.getCatalogs to only return the current
	connection's catalog.  PG doesn't support multiple catalogs on a
	single connection and making this information available only confuses
	people and applications.  Per discussion of Jan 2004.
      </action>
      <action dev="jurka" type="fix" due-to="Marc Herbert">
        Map setObject calls for Types.BLOB, CLOB, and ARRAY to call the
	related setXXX method if we don't need to do any conversion.
      </action>
      <action dev="jurka" type="fix" due-to="Jean-Pierre Pelletier">
        8.1 servers store interval day and hour information separately, so
	we have to be prepared for more than two digits worth of hour data.
	Also pre-7.4 servers do not return second information if it is zero,
	so we cannot parse this field unless it is actually there.
      </action>
      <action dev="jurka" type="fix">
        Add checks to prevent ResultSet.updateXXX methods from throwing
	an ArrayIndexOutOfBoundsException.  We should only throw SQLExceptions
	from here.
      </action>
      <action dev="jurka" type="fix" due-to="Karl von Randow">
        ResultSet.getObject().getClass().getName() should match up with
	ResultSetMetaData.getColumnClassName().  This wasn't true for the
	java.sql.Types.SMALLINT case.
      </action>
      <action dev="jurka" type="fix" due-to="Marc Herbert">
        Make setObject(int, Object) aware of the Blob, Clob, and Array types
	when trying to infer the incoming object type.
      </action>
    </release>

    <release version="8.0-313" date="2005-10-04">
      <action dev="jurka" type="fix" due-to="Albe Laurenz">
        Every execution of a Statement clears the warning chain from the
	previous execution.  This was causing a memory leak by endlessly
	chaining warnings together that should have been discarded.
      </action>
      <action dev="jurka" type="add" due-to="Petr Dittrich">
        Initial Czech translation.
      </action>
      <action dev="jurka" type="fix" due-to="Marc Herbert">
        Map setObject calls for Types.BLOB, CLOB, and ARRAY to call the
	related setXXX method if we don't need to do any conversion.
      </action>
      <action dev="jurka" type="fix">
        Add checks to prevent ResultSet.updateXXX methods from throwing
	an ArrayIndexOutOfBoundsException.  We should only throw SQLExceptions
	from here.
      </action>
      <action dev="jurka" type="fix" due-to="Karl von Randow">
        ResultSet.getObject().getClass().getName() should match up with
	ResultSetMetaData.getColumnClassName().  This wasn't true for the
	java.sql.Types.SMALLINT case.
      </action>
      <action dev="jurka" type="fix" due-to="Marc Herbert">
        Make setObject(int, Object) aware of the Blob, Clob, and Array types
	when trying to infer the incoming object type.
      </action>
    </release>

    <release version="dev401" date="2005-07-24">
      <action dev="oliver" type="add" due-to="Andras Kadinger">
        Support asynchronous notifications by looking for pending messages
	when getNotifications() is called.  Doesn't always pick up on them
	(it depends if the underlying socket input stream implements
	available()) but it's better than the status quo.
      </action>
      <action dev="davec" type="fix">
       Fixed problem with calendar being modified in setDate, setTimestamp.
      </action>
      <action dev="jurka" type="fix">
        Improve null handling.  Allow setNull(1, Types.XXX) for ARRAY,
	NULL, DISTINCT, and STRUCT by mapping them to the unknown oid.
	Make setArray, setBlob, setClob, and setCharacterStream accept
	null parameters.
      </action>
      <action dev="jurka" type="fix">
        In 8.1 index_max_keys != func_max_args which broke the code for
	determining index_max_keys and retreiving foreign key information.
	Use the GUC variable max_index_keys and pg_catalog.generate_series
	instead of inspecting typlens and using
	information_schema._pg_keypositions.
      </action>
      <action dev="jurka" type="add" due-to="Oliver Siegmar">
        Make PGInterval useful instead of just a placeholder by providing
	access to the individual fields.
      </action>
      <action dev="jurka" type="fix">
        Allow jdbc2-optional and jdbc3 test suites to be run on their own
	(with a suitably adjusted build.xml).  They depended on the jdbc2
	tests being run to load the driver for them.
      </action>
      <action dev="jurka" type="fix" due-to="Emmanuel Bernard">
        In Blob.getBytes(long position, int length) position is an offset
	starting at 1, not zero as the driver was previously doing.
      </action>
      <action dev="jurka" type="fix">
        Add a test case to detect if we modify a passed in Calendar object
	to things like PreparedStatement.setTimestamp.  This shows the
	fix for setDate had an error and that the corresponding ResultSet.get
	methods had the same problems.
      </action>
      <action dev="jurka" type="fix">
        Remove redundant javadoc comments (getter/setter methods don't need
	@param @return tags).  Many of which caused warnings because of
	mismatches between @param and the actual parameter name.
      </action>
      <action dev="jurka" type="add" due-to="Weiping">
        Simplified Chineses translation.
      </action>
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian translation updates.
      </action>
      <action dev="jurka" type="update" due-to="Jaroslaw Pyszny">
        Polish translation updates.
      </action>
      <action dev="jurka" type="update">
        Update comments for getExtraNameCharacters to describe why we can't
	list all the possible valid ones.
      </action>
      <action dev="davec" type="fix">
        Added conversions for cts tests.
      </action>
      <action dev="jurka" type="fix">
        Java message format strings need to double 's.
      </action>
      <action dev="jurka" type="update" due-to="Giuseppe Sacco">
        Italian translation updates.
      </action>
      <action dev="oliver" type="fix" due-to="Kevin Grittner">
        Fix ResultSet.getObject(..., Types.SMALLINT) to return an Integer
	per the JDBC3 typemapping appendix.  Add support for several more
	types to ResultSet.getObject: BOOLEAN, TINYINT, DECIMAL, LONGVARCHAR,
	LONGVARBINARY, CLOB, BLOB.
      </action>
      <action dev="davec" type="fix">
        CallableStatmentTest.getShort will only work with v3 protocol
	exposed the protocol version to AbstractJdbc2Connection,
	utility method in TestUtil to enable/disable tests based on
	protocol version.
      </action>
      <action dev="oliver" type="fix">
        Check the pg_input buffer, as well as the socket itself, when looking
	for pending async notifies -- otherwise we only report the first of
	a batch of notifies until more data comes along.
      </action>
      <action dev="oliver" type="add">
        Move the custom UTF-8 decoder into a subclass of Encoding.
	Add support to the UTF-8 decoder for Unicode code points above U+FFFF
	represented as a surrogate pair in Java). These values can be
	generated by the backend from 8.1. The reverse path is already
	handled by the JVM's own UTF-8 encoder.
	Add a number of unicode encode/decode tests to make sure it's
	all working.
      </action>
      <action dev="davec" type="add">
        Modifications to pass JDBC CTS.  Added test cases which are
	essentially the same as the CTS to make sure  we continue to pass it.
      </action>
    </release>

    <release version="8.0-312" date="2005-07-24">
      <action dev="jurka" type="fix">
        Improve null handling.  Allow setNull(1, Types.XXX) for ARRAY,
	NULL, DISTINCT, and STRUCT by mapping them to the unknown oid.
	Make setArray, setBlob, setClob, and setCharacterStream accept
	null parameters.
      </action>
      <action dev="jurka" type="fix" due-to="Emmanuel Bernard">
        In Blob.getBytes(long position, int length) position is an offset
	starting at 1, not zero as the driver was previously doing.
      </action>
      <action dev="jurka" type="fix">
        Add a test case to detect if we modify a passed in Calendar object
	to things like PreparedStatement.setTimestamp.  This shows the
	fix for setDate had an error and that the corresponding ResultSet.get
	methods had the same problems.
      </action>
      <action dev="jurka" type="add" due-to="Weiping">
        Simplified Chineses translation.
      </action>
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian translation updates.
      </action>
      <action dev="jurka" type="update" due-to="Jaroslaw Pyszny">
        Polish translation updates.
      </action>
      <action dev="oliver" type="fix" due-to="Kevin Grittner">
        Fix ResultSet.getObject(..., Types.SMALLINT) to return an Integer
	per the JDBC3 typemapping appendix.  Add support for several more
	types to ResultSet.getObject: BOOLEAN, TINYINT, DECIMAL, LONGVARCHAR,
	LONGVARBINARY, CLOB, BLOB.
      </action>
      <action dev="jurka" type="fix">
        Java message format strings need to double 's.
      </action>
      <action dev="jurka" type="update" due-to="Giuseppe Sacco">
        Italian translation updates.
      </action>
      <action dev="davec" type="fix">
        CallableStatmentTest.getShort will only work with v3 protocol
	exposed the protocol version to AbstractJdbc2Connection,
	utility method in TestUtil to enable/disable tests based on
	protocol version.
      </action>
    </release>

    <release version="dev400" date="2005-04-10">
      <action dev="oliver" type="add">
        Implement basic login timeout support via a 'loginTimeout' URL parameter.
      </action>
      <action dev="jurka" type="fix">
        SQLWarning.getMessage wasn't reporting the message from a Notice
	message in the V3 protocol.  Make the V2 and V3 cases return a
	consistent message and add a test.
      </action>
      <action dev="jurka" type="fix" due-to="Oliver Siegmar">
        Restore the ability for the JDBC driver to map infinite timestamp
	values by using special constants in PGStatement.  The original
	implementation was removed for being arbitrary and unidirectional.
      </action>
      <action dev="jurka" type="add" due-to="Xavier Poinsard">
        Add method names to the not implemented exception to allow
	unhelpful client programs that don't provide a stacktrace
	to be debugged.
      </action>
      <action dev="jurka" type="fix" due-to="Tore Halset">
        Support setNull(x, Types.BLOB) and CLOB, reported by Tore Halset.
      </action>
      <action dev="oliver" type="fix" due-to="Ken Geis">
        Avoid generating garbage byte[0] objects that we immediately discard in
	ReceiveTupleV2 / ReceiveTupleV3. Also some minor rearrangements to avoid
	an unnecessary assignment in the null case. This gives a small performance
	improvement.
      </action>
      <action dev="jurka" type="add" due-to="Peter Royal">
        Get DatabaseMetaData.getIndexInfo to return useful data for
	functional indexes.  Return the expression used for the column name.
      </action>
      <action dev="jurka" type="fix" due-to="Prasanth">
        When moveToCurrentRow is called and the current row is off the
	end of the ResultSet we can't try to load that row because it
	doesn't exist and will throw an Exception.
      </action>
      <action dev="jurka" type="add" due-to="Michael Barker">
        Implement JDBC 3 Blob methods to allow writing.
      </action>
      <action dev="jurka" type="add">
        Make all the fields of a server error message available.
      </action>
      <action dev="jurka" type="add">
        Put all type info handling into a separate file.  This links oids,
	pg type names, sql types, and java class names together.
	Use this information to implement ParameterMetaData's
	getParameterClassName.
      </action>
    </release>

    <release version="8.0-311" date="2005-04-10">
      <action dev="jurka" type="fix">
        SQLWarning.getMessage wasn't reporting the message from a Notice
	message in the V3 protocol.  Make the V2 and V3 cases return a
	consistent message and add a test.
      </action>
      <action dev="jurka" type="fix" due-to="Oliver Siegmar">
        Restore the ability for the JDBC driver to map infinite timestamp
	values by using special constants in PGStatement.  The original
	implementation was removed for being arbitrary and unidirectional.
      </action>
      <action dev="jurka" type="add" due-to="Xavier Poinsard">
        Add method names to the not implemented exception to allow
	unhelpful client programs that don't provide a stacktrace
	to be debugged.
      </action>
      <action dev="jurka" type="fix" due-to="Tore Halset">
        Support setNull(x, Types.BLOB) and CLOB, reported by Tore Halset.
      </action>
      <action dev="jurka" type="fix" due-to="Prasanth">
        When moveToCurrentRow is called and the current row is off the
	end of the ResultSet we can't try to load that row because it
	doesn't exist and will throw an Exception.
      </action>
      <action dev="jurka" type="fix">
        Ensure PSQLWarning is Serializable.
      </action>
    </release>

    <release version="8.0-310" date="2005-02-02">
      <action dev="oliver" type="fix" due-to="Xavier Poinsard">
        Bugfixes and tests for two date-related bugs:

	The jdbc escaped scalar function dayofweek should return values between
	1 and 7 (1 for sunday) unlike the backend "extract dow" function which is
	zero-based.

	The literal escaped values for date/time/timestamp were not explicitly casted
	which causes some problems. For example:   extract( dow from '2005-01-17 12:00:00')
      </action>
      <action dev="oliver" type="fix">
        When locating driver configuration resources, if getClass().getClassLoader()
	returns null (i.e. the driver was loaded via the bootstrap classloader)
	then try the system classloader instead.

	Load driver configuration in a privileged block, in case there is a lower-
	privilege caller that does not have read access to the driver's jar.
      </action>
      <action dev="jurka" type="update">
        Name documentation files after there id attributes, not chapter
	and section numbers, so if people link to them and we reorganize
	things they have a better change of pointing to the right place.
      </action>
      <action dev="oliver" type="fix" due-to="Jean-Pierre Pelletier">
        Fix the PGInterval(String) ctor to correctly set the object's postgresql
	type.
      </action>
      <action dev="jurka" type="add" due-to="Xavier Poinsard">
        Implement Connection.nativeSQL.
      </action>
      <action dev="jurka" type="fix">
        Don't map the escaped difference function to levenshtein because
	that's not the same thing.
      </action>
      <action dev="jurka" type="add" due-to="Xavier Poinsard">
        Document JDBC escape sequences.
      </action>
      <action dev="jurka" type="add" due-to="Xavier Poinsard">
        Add basic support for JDBC escape for escape char in LIKE string
	comparisons.
      </action>
      <action dev="oliver" type="fix" due-to="Martin Keller">
        Bugfix and testcase for NPE when using an updateable resultset obtained from
	a PreparedStatement on a v3 connection.
      </action>
      <action dev="oliver" type="fix">
        Reject attempts to update a CONCUR_READ_ONLY resultset.
	Test fixes and testcase for this.
      </action>
      <action dev="oliver" type="fix">
        Correctly handle changes in parameter types when using server prepared statements,
	by freeing the old statement and repreparin with the new types.

	Previously, if a statement was prepared with one set of types and then reused
	with a different set of types, the driver wouldn't notice and would continue
	to (try to) use the original prepared statement.
      </action>
      <action dev="jurka" type="fix">
        Reenable the refcursor unit test and make it pass.
	Add a test and update the documentation to reflect that refcursor
	ResultSets do have working MetaData (at least with the V3 protocol).
      </action>
      <action dev="jurka" type="add">
        Implement the Describe Statement protocol message.  Reallow untyped
	nulls and get the backend to resolve the type for us (if necessary).
	Also use this message and a new non-executing query execution to
	implement PreparedStatement.getMetaData() for an unexecuted
	statement and PreparedStatement.getParameterMetaData().
      </action>
    </release>

    <release version="8.0-309" date="2005-01-17">
      <action dev="jurka" type="fix">
        Fix warnings on javadoc because the comments were attached to
	fields instead of functions.
      </action>
      <action dev="jurka" type="fix">
        Adjust DatabaseMetaData to acknowledge that 8.0 supports savepoints.
      </action>
      <action dev="jurka" type="fix">
        Change error message to reflect the driverconfig.properties file name.
      </action>
      <action dev="oliver" type="fix">
        Minor code rearrangement to avoid warnings from jikes.
	Fix several switch-fallthrough bugs detected by jikes.
      </action>
      <action dev="jurka" type="update" due-to="Nicolai Tufar">
        Updated Turkish translation.
      </action>
      <action dev="jurka" type="update" due-to="Zhenbang Wei">
        Updated Chinese translation.
      </action>
      <action dev="jurka" type="update" due-to="Serguei Mokhov">
        Updated Russian translation.
      </action>
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Updated Brazilian Portuguese translation.
      </action>
      <action dev="jurka" type="add" due-to="Xavier Poinsard">
        Initial French translation.
      </action>
      <action dev="jurka" type="update" due-to="Guillame Cottenceau">
        Updated French translation.
      </action>
      <action dev="jurka" type="add" due-to="Andre Bialojahn">
        Initial German translation.
      </action>
      <action dev="jurka" type="fix">
        In a java MessageFormat you need to double single quotes to get
	them to work correctly.
      </action>
      <action dev="oliver" type="fix">
        Throw exceptions if cancelRowUpdates() or updateRow() are called
	when on the insert row, per javadoc.
      </action>
      <action dev="jurka" type="fix">
        Add a URL parameter (allowEncodingChanges) which allows a client
	to change the client_encoding variable.  This is necessary because
	server side COPY commands expect the file to be encoded in the
	client_encoding.
      </action>
      <action dev="jurka" type="add">
        Implement holdable ResultSet support by simply avoiding the use of
	cursors and fetching all data at once.
      </action>
      <action dev="jurka" type="add" due-to="Xavier Poinsard">
        Implementation of standard escaped functions ( {fn func()} )
	by rewriting to existing PostgreSQL functions.
      </action>
      <action dev="jurka" type="fix">
        Check to see if a ResultSet is closed before performing operations on
	it.  This avoids potential NullPointerExceptions and other problems.
      </action>
      <action dev="jurka" type="fix">
        Rewrite date/time/timestamp parsing code.  Instead of trying to jam
	it into a format we can use DateFormat.parse on, just read the fields
	individually.

	This fixes problems with BC dates and dates past 9999.

	It now also rejects +/- infinity instead of mapping these to
	arbitrary java values.  There is no equivalent.
      </action>
      <action dev="jurka" type="fix">
        Since getURL is not implemented, throw an exception, don't just
	return null.
      </action>
      <action dev="jurka" type="update" due-to="Xavier Poinsard">
        Reduce number of messages to translate by parameterizing common
        error messages.
      </action>
      <action dev="jurka" type="fix">
        When closing a Statement or ResultSet be sure to close the underlying
	Query/ResultCursor to release backend resources.
      </action>
      <action dev="jurka" type="fix">
        Do not use named statements when batch executing a whole bunch of
	individual sql statements.  We'll never reuse them and they just
	take up backend resources.
      </action>
      <action dev="jurka" type="fix">
        When loading driverconfig.properties files from the classpath, ensure
	that settings are read in reverse classpath order.  This means that
	settings from files earlier in the classpath override settings from
	files found at the end of the classpath.
      </action>
      <action dev="jurka" type="fix">
        Allow the regression tests to pass when running against an 8.0 server
	with default_with_oids turned off.  Some tests depend on a table
	having oids.
      </action>
      <action dev="jurka" type="add">
        Implement CallableStatement.getArray.
      </action>
      <action dev="jurka" type="fix">
        When retrieving Int8 or Int16 protocol message formats, we need to
	correctly truncate the Int32 storage used to sign these narrower
	types.  This notably appeared in RowDescription message for
	variable length datatypes.  The Field.length should have been -1, but
	was 65535.
      </action>
      <action dev="jurka" type="update">
        Rename PGConnectionPool to PGConnectionPoolDataSource to try and
	better identify it as not actually being a connection pool.  Update
	the documentation to point to the new common org.postgresql.ds
	classes instead of separate jdbc2/jdbc3 implementations.
      </action>
      <action dev="jurka" type="update">
        Update copyright year to 2005.
      </action>
      <action dev="jurka" type="fix">
        When calling toString on a Statement, don't go into a infinite loop.
      </action>
      <action dev="jurka" type="fix">
        When determining if the user has changed the client_encoding to
	something other than unicode, the comparison must be done case
	insensitively.
      </action>
      <action dev="oliver" type="fix">
        Add PSQLState codes to all PSQLExceptions thrown by the driver.
	Remove the PSQLException ctor that does not take a PSQLState.

	Intercept exceptions in PooledConnectionImpl's handlers. When a fatal
	exception is seen (determined by looking at the exception's SQL state),
	notify any connection event listeners.

	Fix rethrowing of exceptions at the Connection level in
	PooledConnectionImpl.
      </action>
      <action dev="oliver" type="update">
        Change default autocommit of our CPDS implementation to on, to be
	consistent with normal connections.
      </action>
      <action dev="jurka" type="update">
        Bail out with a helpful error message if we cannot build or run the
	test suite because of missing dependencies, junit or ant's junit task.
      </action>
      <action dev="jurka" type="add">
        Add a chapter on SSL configuration to the documentation.
      </action>
    </release>

    <release version="8.0beta1-308" date="2004-11-09">
      <action dev="jurka" type="update" due-to="Serguei Mokhov">
        Updated Russian translation.
      </action>
      <action dev="jurka" type="fix" due-to="Christian Niles">
        Correctly cast the return value of a CallableStatement when getShort
	is called.  getByte presents a can't happen situation as no function
	can return a TINYINT because pg doesn't have an equivalent type.
	Make this throw an exception if we get to this point.
      </action>
      <action dev="jurka" type="add" due-to="Diego A. Gil.">
        New Spanish translation.
      </action>
      <action dev="jurka" type="fix" due-to="Alexey Yudichev">
        Make PreparedStatement.setNull(i, Types.BOOLEAN) strongly typed.
	Previously only Types.BIT was used the boolean oid mapping and
	Types.BOOLEAN used the unknown oid.
      </action>
      <action dev="jurka" type="fix" due-to="Alexey Yudichev">
        When using large objects for binary data (compatibleVersion &lt; 7.2)
	support setNull(i, Types.VARBINARY) to set the oid of the large
	object to NULL.
      </action>
      <action dev="jurka" type="update" due-to="Vadim Nasardinov">
        Update READMEs to reflect the current situation.
      </action>
      <action dev="jurka" type="fix">
        When calling setNull or setObject with Types.CHAR, use the oid of
        the bpchar pg type, not varchar.  Correct array creation that was
	using char, not bpchar.  Type all textual data as varchar instead
	of text because it allows the correct comparison to be made with
	char data on text with trailing spaces: 
	SELECT ' '::char = ' '::varchar;
      </action>
      <action dev="jurka" type="update" due-to="Euler Taveira de Oliveira">
        Brazilian translation update.
      </action>
      <action dev="jurka" type="fix" due-to="Alexey Yudichev">
        Make fastpath/largeobject code aware of transaction state, so that
	in autocommit off mode it will start a new transaction if necessary.
      </action>
      <action dev="jurka" type="fix" due-to="Alexey Yudichev">
        Bit shifting code had a typo that incorrectly reconstructed an int
	from a byte[].  This fixes a problem with large objects on systems
	whose oid counter is >= 0x01000000.
      </action>
      <action dev="jurka" type="fix" due-to="Christian Niles">
        Make registerOutParameter work with Types.BOOLEAN.
      </action>
      <action dev="oliver" type="fix">
        Disallow these cases as we have insufficient type information:
	setNull(i, Types.OTHER), setObject(i, null),
	setObject(i, null, Types.OTHER).  Fix updateable result sets so
	they pass type information on when setting a column to NULL.
      </action>
      <action dev="jurka" type="fix">
        Don't allow a negative fetch size to be set on a ResultSet.
      </action>
      <action dev="oliver" type="fix">
        Make sure that ds/* really is included in the set of files to
	compile (fixes some dependency problems with partial builds).
      </action>
      <action dev="jurka" type="fix">
        Make escape syntax processing {oj (and friends) } case insensitive.
      </action>
      <action dev="oliver" type="fix">
        Fixes for handling double-quotes and backslashes in single-quoted
	literals when parsing queries for parameter placeholders.
      </action>
      <action dev="jurka" type="fix">
        Updatable ResultSets need to check for an empty ResultSet because
	isBeforeFirst and isAfterLast both return false for an empty result
	so the checking to make sure the user is on a valid row wasn't
	working.  Also don't allow an insert without specifying at least
	one column value because INSERT INTO tab() values() is a syntax error.
      </action>
      <action dev="jurka" type="fix">
        When splitting up a multistatement query to be executed individually
	do not consider a whitespace only query to be significant.  The
	original code correctly considered "SELECT 1;" to be one query, but
	thought "SELECT 1; " was two queries.
      </action>
      <action dev="jurka" type="fix">
        When a connection attempt is made that does not provide a username,
	then let this go through to the server as the empty string producing
	a "no user name specified" error instead of a NullPointerException.
      </action>
      <action dev="jurka" type="fix" due-to="Alan Stange">
        When executing a batch statement that has two statements in it, we
	get confused and bail out with a "Too many update results" message.
	This message construction was producing an
	ArrayIndexOutOfBoundsException because it wasn't checking bounds
	properly.
      </action>
      <action dev="jurka" type="update">
        Standardize copyright notices and use of the PostgreSQL cvs
	keyword.  Update copyright years to 2004.
      </action>
      <action dev="jurka" type="update">
        Upgrade website to use forrest 0.6.
      </action>
      <action dev="oliver" type="add">
        Allow configuration of the driver by a properties file.
	All copies of org.postgresql.driverconfig.properties found in the
	classpath will be read and used to setup defaults for the driver.
	The most prominent use of this is to allow third parties to provide
	 mappings for custom datatypes.
      </action>
      <action dev="jurka" type="update">
        Set the default prepareThreshold to five per previous discussion.
      </action>
      <action dev="jurka" type="update">
        Indent source code with: astyle -j -p --convert-tabs
      </action>
    </release>

    <release version="dev307" date="2004-10-19">
      <action dev="jurka" type="update">
        Some general code cleanups.  Remove unnecessary imports and a couple
        unused variables.  In the test suite ensure that assertEquals() uses
        the correct order for expected and actual arguments.  Also remove
        pointless try/catch blocks.
      </action>
      <action dev="jurka" type="fix">
        Don't use cursor/portal based fetch methods with autocommit on.  The
	underlying portal will disappear from underneath the driver.
      </action>
      <action dev="jurka" type="add" due-to="Jaroslaw J. Pysnzy">
        Implement ResultSet.isAutoIncrement by retrieving the column's
	default value and seeing if there is a "nextval" call in it.
      </action>
      <action dev="jurka" type="add" due-to="Jaroslaw J. Pysnzy">
        Return serial datatypes in DatabaseMetaData getTypeInfo and getColumns.
      </action>
      <action dev="jurka" type="fix">
        ResultSet.getRow on a cursor/portal backed query was not counting
	previously discarded data and only returned the row number within
	the current chunk of data.
      </action>
      <action dev="oliver" type="fix">
        Fix setArray when using the v3 protocol.  We can't bind arrays as
	text, we need the correct type.  This gets the array type from the
	Array.getBaseType method.  This is a fragile means that depends on
	a specific Array implementation, but we already depend on a very
	specific implementation (toString() returning a correctly
	formatted pg array) that we can live with this.
      </action>
      <action dev="jurka" type="add">
        Update the translation system to use gettext instead of property
	files.
      </action>
      <action dev="jurka" type="fix" due-to="Ulrich Meis" fixes-bug="1004">
        For updateable ResultSets make insertRow and deleteRow quote column
        names like updateRow already does.  This makes these methods work
        on mixed case identifiers.
      </action>
      <action dev="jurka" type="fix">
        PreparedStatement.setCharacterStream somehow escaped getting fixed
	for the old problem of assuming a stream can be read completely
	in one read() call.
      </action>
      <action dev="jurka" type="fix" due-to="Phill Tornroth and Peter Mount">
        Speed up ResultSet.findColumn by caching the column name to index
	mapping.
      </action>
      <action dev="jurka" type="fix">
        Contstruct the backing hash for updateable resultsets on demand
	because the vast majority of resultsets aren't updateable.  Also
	change it from a Hashtable to a HashMap because two threads shouldn't
	be updating the same resultset at the same time.
      </action>
      <action dev="jurka" type="fix" due-to="Euler Taveira de Oliveira">
        Fix typos in error messages and update the pt_BR translation.
      </action>
      <action dev="jurka" type="fix">
        In 8.0 arrays with non-standard bounds (beginning index != 1) the
	dimensions are returned in the data like so "[0:3]={0,1,2,3,4}".
	Add some code to ignore these bounds and match previous server
	version behavior.
      </action>
      <action dev="jurka" type="fix">
        Restructure DataSource code to provide a generic interface in
	org.postgresql.ds.*.  No longer is the jdbc version we compiled
	for relevent.  This allows the driver and regression suite to be
	compiled with the 1.5 jdk.
      </action>
      <action dev="jurka" type="add" due-to="Ulrich Meis">
        Allow users to customize the SSL connection by providing their
	own SSLSocketFactory implementation.
      </action>
      <action dev="jurka" type="fix">
        When streaming data from setBinaryStream to the backend, do not
	allow Exceptions or bad length parameters to cause the connection
	state to get confused destroying the connection.
      </action>
      <action dev="jurka" type="add" due-to="Devrim GUNDUZ">
        Initial translation to Turkish.
      </action>
    </release>

    <release version="dev306" date="2004-09-16">
      <action dev="jurka" type="fix" due-to="David Bucciarelli">
        ResultSet.moveToCurrentRow was checking the cached updateability flag
	assuming it had been set instead of correctly calling the
	isUpdateable() method which sets the flag if needed.  This usually
	worked because moveToCurrentRow is only useful after a
	moveToInsertRow call which would set the flag, but this is not
	required.
      </action>
      <action dev="jurka" type="fix" fixes-bug="937">
        Fix NullPointerException when doing a multiple query execution in
	one statement using the V3 protocol.  For example
	Statement.execute("SELECT 1; SELECT 2"); would not have any
	parameters set and try to iterate over a null array.
      </action>
      <action dev="jurka" type="add" fixes-bug="934">
        Implement support for the Savepoint interface.
      </action>
      <action dev="jurka" type="add">
        Add a new file to hold the build number to avoid filling the
        Driver.java.in commit log with just build number changes.
	Also add a utility program to print out the driver version and where
        it was loaded from.
      </action>
    </release>

    <release version="dev305" date="2004-08-12">
      <action dev="oliver" type="fix">
        My version of junit (3.7) doesn't have assertFalse.  ArrayTest uses
        it in a couple of places.  This patch changes assertFalse(condition)
        to assertTrue(!condition).
      </action>
      <action dev="oliver" type="fix">
        Ensure the encoding test drops its table at the end of the run to
	make sure other tests do not see it and get confused.
      </action>
      <action dev="oliver" type="fix">
        Don't make the driver begin a transaction for certain calls.
        Notably we don't want Connection.getTransactionIsolation() to start
        a transaction because this is often a check put in before trying to
	change it and you can't change it in mid-transaction.
      </action>
      <action dev="jurka" type="fix">
        Don't report the hashcode of our error message key into the
        properties file as the vendor error code.  This number is completely
        random and undocumented and ties us into using the current error
	message keys and implementation to maintain the same codes.  Further
	error messages from the server will not provide this value, so it's
	best to leave it alone entirely and tell people to use getSQLState().
      </action>
      <action dev="jurka" type="fix">
        The maxRows variable was preventing using a portal based fetch when
	it was actually desired.  maxRows == 0 is a special case meaning
	return all rows and needs to be handled differently.
      </action>
      <action dev="jurka" type="fix">
        I recently made a change to report a numeric type that had no size
	information as numeric(1000,1000) thinking this meant 1000 digits to
	the right and left of the decimal point.  This not the case.  I had
	considered 1000,1000 because 1000 is the limit for both of these
	arguments and that made some sense although still arbitrary.  Moving
	to something like (1000,500) seems verging on completely random, so
	I've backpedalled and made it return (-1,-1) because we don't have
	this information and don't have the ability to return NULL.
      </action>
      <action dev="oliver" type="fix">
        Now that ResultSetMetaData returns different results for
	getColumnName and getColumnLabel, use the underlying table's column
	name (getColumnName) when working on an updatable ResultSet.
      </action>
      <action dev="jurka" type="update">
        Modify version checking code and descriptions to match the decision
	that 8.0 will be the next release, not 7.5.
      </action>
      <action dev="jurka" type="fix" due-to="Mike Martin" fixes-bug="921">
        Revert ResultSetMetaData methods getColumnName, getTableName and
        getSchemaName to previous implementation that returned the column's
	alias if available and "" for the table and schema.  Move the new
	functionality to access the underlying sources of the query to a
	new PGResultSetMetaData interface which offers getBaseXXXName.
      </action>
      <action dev="davec" type="add">
        Add ODBC style escape sequences for function {fn ...} and outer join
	{oj ...}.
      </action>
      <action dev="jurka" type="fix">
        DatabaseMetaData.getSearchString escape was a \ short of working
	because both Java's String constructor and pg's input parser strip
	off backslashes.
      </action>
      <action dev="jurka" type="fix">
        Change the escape syntax test for functions to actually call a
	function.
      </action>
    </release>
    
    <release version="dev304" date="2004-07-17">
      <action dev="jurka" type="fix" due-to="Dario V. Fassi">
        Some ResultSetMetaData fixes.
        Remove completely duplicated code in the jdbc1/jdbc2 implementations.
        Recognize "time with timezone" as a java.sql.Types.TIME.
	Report time/timestamp fractional seconds in getScale().
	For unspecified numeric precision/scale use 1000,1000 which is the
	maximum pg will allow you to specify.
	Correct getColumnDisplaySize to aware of fractional seconds and
	timezones for time/timestamp types.
      </action>
      <action dev="oliver" type="add">
        Make the driver generate errors on unknown
	transaction states in a ReadyForQuery message, rather than silently
	ignoring them (and probably getting confused).
      </action>
      <action dev="davec" type="add">
        Added getXXX optional method functionality, allows user to use getXXX
	to get a byte, short, int, long, double, char via the preferred
	method as well as the non-preferred. For instance getByte can get a
	short, int, long, double, or varchar.
      </action>
      <action dev="jurka" type="fix" due-to="Oliver Dauben">
        When retrieving an array of numerics it attempted to set the scale on
	the retrieved data to zero, which doesn't work for non-integer values.
	Also allow a ResultSet created from an Array to be scrolled and add
	some test cases to make sure things work.
      </action>
      <action dev="jurka" type="update">
        Now that JDBC1 is no longer supported merge the implemention of
	JDBC1 methods into the JDBC2 classes.
      </action>
      <action dev="jurka" type="fix">
        Add the ability to compile with the 1.5 Beta 2 JDK.  Sun has altered
	the JDBC API without altering the version number, so I've created a
	new jdbc3g subdirectory for a "JDBC3 w/ Generics" implementation.
	This doesn't support compiling the DataSource implementations as they
	don't have the same multi-version architecture that the core driver
	does.
      </action>
      <action dev="oliver" type="fix">
        Fix decodeUTF8 that was broken in build 303.
      </action>
    </release>

    <release version="dev303" date="2004-07-01">
      <action dev="jurka" type="fix" due-to="Kevin MacClay">
        Don't throw an Exception in locatorsUpdateCopy() even though the
	ability to update LOBs is unimplemented.  The 1.5 JDK's CachedRowSet
	implementation calls this method regardless of whether large objects
	are used or not.
      </action>
      <action dev="jurka" type="fix" due-to="Jan de Visser">
        Fix updatable ResultSets stream methods (ascii, character, binary).
	The existing code didn't correctly allocate data arrays, and it
	failed to loop when a stream didn't provide the full amount of
	data requested of it.
      </action>
      <action dev="jurka" type="fix">
        Fix some problems with result sets positioned before the start or
	after the end of results.  You could still call a number of methods
	on them like getXXX, updateXXX, and updateRow().
      </action>
      <action dev="jurka" type="fix">
        Review recent getUDT implementation.  Filter out base and pseudo types
	if no type array is specified.  Correctly handle a zero length type
	array.
      </action>
      <action dev="jurka" type="fix" due-to="Markus Schaber">
        Fix apparently harmless typo in build.xml.  {$srcdir} -> ${srcdir}
      </action>
      <action dev="oliver" type="add">
        Modularize query execution and add complete V3 protocol support.
      </action>
      <action dev="oliver" type="fix">
        Fix NullPointerException on Statement.clearBatch() when addBatch()
	hasn't been called.
      </action>
    </release>

    <release version="dev302" date="2004-06-15">
      <action dev="blind" type="add">
        Added a cvsignore for PSQLException.java since this file is now
	generated.
      </action>
      <action dev="oliver" type="fix">
        Enforce the requirement that you must have a scrollable resultset
	to call some methods (last(),
	absolute(), etc). Without this patch, these methods
	complete "normally" but can return incorrect data if the resultset
	is backed by a cursor. It also adds tests for this behaviour, and
	fixes a number of tests and one case in the driver itself that try
	to use these methods with the wrong resultset type.
      </action>
      <action dev="jurka" type="fix">
        Fix TimeTests for jdk1.2 and 1.3.  Pre 1.4 JVMs consider the
	nanoseconds field of a java.sql.Timestamp completely separate and
	do not return the milliseconds in getTime().  Add a new JVM version
	test in TestUtil to allow both cases.
      </action>
      <action dev="oliver" type="fix">
        Fix the various ResultSet position querying methods (isFirst, isLast,
	isBeforeFirst, isAfterLast) to work on TYPE_FORWARD_ONLY ResultSets
	that are backed by a cursor.
      </action>
      <action dev="jurka" type="fix">
        When calling stmt.executeUpdate the statement only returns a row count
	with INSERT/UPDATE/DELETE/MOVE, other statments should return zero as
	the affected row count.  The existing driver behavior was to return
	whatever the last count was instead of resetting to zero.
      </action>
      <action dev="jurka" type="fix">
        Track transaction status and only issue a BEGIN command on the first
	statement executed, not immediately after the previous commit or
	rollback.  This should help the long standing, but recently very
	unpopular "idle in transaction" behavior.
      </action>
      <action dev="oliver" type="fix">
        Fix failures in TimeTest for timezones ahead of GMT.  This produces a
	Time value before the epoch which came up with negative values.
      </action>
      <action dev="jurka" type="fix">
        Allow the regression tests to run successfully against a 7.2 server.
	7.2 apparently doesn't like casting a timestamp with time zone to
	time without time zone, so we've got to cast through an intermediate
	timestamp without time zone.
      </action>
      <action dev="jurka" type="fix" due-to="Moray Taylor">
        Allow updateable ResultSets to support types that aren't directly
	mappable to Java types, for example cidr.
      </action>
      <action dev="jurka" type="fix" due-to="Moray Taylor">
        While ResultSets created by
	ResultSet rs = connection.createStatement().executeQuery(sql);
	default to TYPE_FORWARD_ONLY per spec, ResultSets created as the
	result of a DatabaseMetaData call should be more flexible and
	allow scrollable calls to be made.
      </action>
      <action dev="jurka" type="fix">
        Update the build.xml file to support building with the new 1.5 jdk
	and ant 1.6.  Rename the 1.4 specific replacement variable in
	PSQLException to describe it's true meaning (the existence of
	Throwable.initCause()).
      </action>
      <action dev="jurka" type="fix" due-to="Declan Lynch">
        Allow public access to radius field to match other geometric types
	behavior.
      </action>
      <action dev="jurka" type="update">
        Remove the old style javadoc entries for extensions that were copy
	and pasted into the documentation.  Add a javadoc build target to
	produce documentation for the external API.  At the moment this
	leaves the extensions chapter pretty bare, but it would be better
	to fill that in with helpful examples than simply regurgitating the
	API in an inconvenient format.
      </action>
      <action dev="oliver" type="add">
        Allow enabling server side prepared statements globally without
	writing pg specific code by setting the prepared statement
	threshold in the connection url or datasource.  Instead of a
	simple on/off flag, the prepared statement mechanism is an
	execution count threshold, so ideally it will turn itself on for
	frequently used queries while not getting in the way of one time
	use executions.
      </action>
      <action dev="jurka" type="add">
        Add documentation for using listen/notify with JDBC.
      </action>
      <action dev="davec" type="add">
        Implement DatabaseMetaData.getUDT
      </action>
      <action dev="jurka" type="update">
        Update the expected foreign key name results to match the new 7.5
	backend behavior.  Generated foreign key names are now usefully
	named based on the table and columns instead of things like $1.
      </action>
      <action dev="jurka" type="fix" due-to="Bob Messenger and Chris Pesarchick">
        When deleteRow() is called on an updateable ResultSet the ResultSet
	should be positioned on the previous row.
      </action>
    </release>
    
    <release version="dev301" date="2004-03-29">
      <action dev="jurka" type="update">
        Now that we are out of the main tree, we can't rely on the makefile
	system to tell us about versions and ports and other options so we
	are at least temporarily back to using a hardcoded build.properties
	file.
      </action>
      <action dev="jurka" type="fix">
        Newer versions of the 1.4.2 jdk give warnings about having return in a
	finally clause.
      </action>
      <action dev="jurka" type="add" due-to="Jan-Andre le Roux">
        Use the new information available in the V3 protocol to implement
	ResultSetMetaData methods describing the underlying tables:
	getSchemaName, getTableName, getColumnName,
	getColumnLabel, and isNullable.
      </action>
      <action dev="oliver" type="update">
        Modify various testcases and test support code so they
	do not catch-and-rethrow SQLExceptions as assertion failures. This
	means you actually see the original exception (and under 1.4, any
	nested exception) without any extra work; it also makes the code a
	bit easier to read.
      </action>
      <action dev="oliver" type="update">
        Enable test cases related to server
	side prepare and transforming to a cursor based fetch which
	previously were failing.
      </action>
      <action dev="oliver" type="fix">
        Be spec compliant in creating ResultSets that are of TYPE_FORWARD_ONLY
	by default.  This allows us to be more aggressive in using scrollable
	ResultSets because they are usable by default.  Also correctly track
	the values for result set type, concurrency, and fetch direction in
	both the ResultSet and Statement.
      </action>
      <action dev="jurka" type="fix" due-to="Martin Holz">
        Fix the setXXXStream methods.  If passed a null InputStream, convert
	this to a setNull call.  The code originally would try to read the
	whole stream in one call to read(), but this doesn't work.  The
	InputStream API makes it clear you must be prepared to loop and
	continue reading if you didn't get the whole request on the first
	try.
      </action>
      <action dev="jurka" type="fix">
        ResultSet.next() and previous() incremented or decremented the
	internal current_row variable regardless of wether they succeeded or
	not.  This generated some ArrayIndexOutOfBoundsExceptions when the
	errorneous adjustment current_row led to out of range values.
      </action>
      <action dev="davec" type="add" due-to="Peter Eisentraut">
        Added xml docbook documentation.
      </action>
      <action dev="jurka" type="fix" due-to="R. Lemos">
        ConnectionPool and SimpleDataSource are marked Serializable, but their
	superclass (which contains a number of state variables) is not.  To
	correctly serialize these objects we need to manually implement
	writeObject and readObject.
      </action>
      <action dev="jurka" type="add">
        Add documentation validation target which doesn't require additional
	xml libraries beyond those that come with ant.  Also add the ability
	to customize a local build via a build.local.properties file.  In this
	file you can set the necessary parameters for the docbook dtds and
	stylesheets to match your installation.
      </action>
      <action dev="jurka" type="fix">
        V3 NotificationResonse messages were trying to be received as V2
	messages.  Also the PID was being read in the wrong byte order.
	Additionally add a stub for the currently unimplemented notify
	parameter.  Finally add a test case for listen/notify.
      </action>
      <action dev="davec" type="add">
        Added documentation for Tomcat setup.
      </action>
      <action dev="davec" type="add">
        Added rudimentary PGInterval class to deal with retrieving intervals
	via getObject.
      </action>
      <action dev="davec" type="fix">
        Added StatementTest to test for statement re-use, fixed
	ResultSetTest to pass this test.
      </action>
      <action dev="davec" type="fix">
        Added a check to make sure statements weren't being re-used after
	being closed.
      </action>
      <action dev="jurka" type="fix" due-to="Chris Smith">
        Improve V3 protocol startup to reduce roundtrips to the server.
      </action>
      <action dev="oliver" type="add">
        Support JDK 1.4-style exception chaining in PSQLException.
	Various cleanups to PSQLException constructors, don't override where
	not necessary.
      </action>
      <action dev="davec" type="fix">
        Added functionality to deal with the timetz datatype, and handle
	msec better.
      </action>
      <action dev="davec" type="add">
        Modified ResultSet.getTime routines to use a calendar if available.
      </action>
      <action dev="jurka" type="add">
        Update documentation to reflect the current build process.
	Note the restrictions on using cursor based ResultSets.
      </action>
      <action dev="jurka" type="fix">
        If the user has requested a SSL connection and the driver has not
	been compiled with SSL support throw an Exception instead of silently
	falling back to a non SSL connection.
      </action>
      <action dev="jurka" type="add">
        Document the additional connection parameters that specify pg
	specific behavior: ssl, compatible, loglevel, and charSet.
      </action>
      <action dev="jurka" type="fix" due-to="Victor Sergienko">
        Closing a Connection or Statement object twice should be a no-op
	instead of throwing an Exception.
      </action>
      <action dev="davec" type="fix">
        Added additional tests for time, timestamps, and fixed code to pass.
      </action>
      <action dev="davec" type="fix" due-to="Lazlo Hornyak">
        Hungarian translation update.
      </action>
      <action dev="blind" type="fix">
        Fixed bug where the V3 protocol support was not properly handling
	binary cursors.  Also fixed a compile problem with the test suite
	under jdk1.2 and 1.3.  Also fixed a problem with OID74Test which
	wasn't commiting a table drop so it was leaving a table in the
	database after the test run.
      </action>
    </release>
  </changes>

  <todo>
    <actions priority="Known Bugs">
      <action context="bugs">
        Deallocating large numbers of server side statements can break the
	connection by filling network buffers.  This is a very, very low
	probability bug, but it is still possible.
	<link href="http://archives.postgresql.org/pgsql-jdbc/2004-12/msg00115.php">ref</link>
      </action>
      <action context="bugs">
        ACLs have changed format since the parsing code was written.  The
	code only supports 7.3 style ACLs.  DatabaseMetaData methods like
	getTablePrivileges do not work correctly against later servers.
      </action>
    </actions>

    <actions priority="Compliance">
      <action context="JDBC1">
        Implement Statement.setQueryTimeout.
	<link href="http://gborg.postgresql.org/project/pgjdbc/bugs/bugupdate.php?888">ref</link>
      </action>
      <action context="JDBC2">
        Sort DatabaseMetaData.getTypeInfo properly (by closest match).
      </action>
      <action context="JDBC2">
        Implement SQLInput and SQLOutput to allow composite types to be used.
      </action>
      <action context="JDBC3">
        Implement Statement.getGeneratedKeys.
	<link href="http://gborg.postgresql.org/project/pgjdbc/bugs/bugupdate.php?984">ref1</link>,
	<link href="http://archives.postgresql.org/pgsql-jdbc/2004-09/msg00190.php">ref2</link>
      </action>
      <action context="JDBC3">
        The JDBC 3 DatabaseMetaData methods sometimes return additional
	information.  Currently we only return JDBC 2 data for these methods.
	<link href="http://archives.postgresql.org/pgsql-jdbc/2004-12/msg00038.php">ref</link>
      </action>
      <action context="JDBC3">
        Implement Clob write/position methods.
      </action>
    </actions>

    <actions priority="Performance">
      <action>
        Add statement pooling to take advantage of server prepared statements.
      </action>
      <action>
        Allow scrollable ResultSets to not fetch all results in one batch.
      </action>
      <action>
        Allow refcursor ResultSets to not fetch all results in one batch.
      </action>
      <action>
        Allow binary data transfers for all datatypes not just bytea.
      </action>
    </actions>

    <actions priority="PG Extensions">
      <action dev="jurka">
        Add support for COPY.
      </action>
      <action>
        Allow configuration of GUC parameters via the Connection URL or
	Datasource.  The most obvious example of usefulness is search_path.
	<link href="http://archives.postgresql.org/pgsql-jdbc/2004-02/msg00022.php">ref</link>
      </action>
    </actions>

    <actions priority="Other">
      <action context="test">
        Pass the JDBC CTS (Sun's test suite).
      </action>
      <action context="feature">
        Allow Java array types to be used in PreparedStatement.setObject.
      </action>
      <action context="feature">
        Allow multi-dimensional array support.
      </action>
      <action context="code">
      	Allow SSL to use client certificates.  This can probably be done with
	our existing SSLSocketFactory customization code, but it would be
	good to provide an example or other wrapper so a non-expert can set
	it up.
	<link href="http://archives.postgresql.org/pgsql-jdbc/2004-12/msg00077.php">ref1</link>,
	<link href="http://archives.postgresql.org/pgsql-jdbc/2004-12/msg00083.php">ref2</link>
      </action>
      <action context="code">
        Currently the internal type cache is not schema aware.
      </action>
      <action context="code">
        Need a much better lexer/parser than the ad hoc stuff in the driver.
	<link href="http://gborg.postgresql.org/project/pgjdbc/bugs/bugupdate.php?793">ref1</link>,
	<link href="http://archives.postgresql.org/pgsql-jdbc/2004-09/msg00062.php">ref2</link>
      </action>
      <action context="metadata">
        getTypeInfo returns table types because they are valid datatypes, but
	it seems pointless to return toast tables' types here.
      </action>
    </actions>

    <actions priority="Ideas">
      <action>
        Allow Blob/Clob to operate on bytea/text data.
	<link href="http://archives.postgresql.org/pgsql-jdbc/2005-01/msg00058.php">ref</link>
      </action>
      <action>
        Allow getByte/getInt/... to work on boolean values
	<link href="http://archives.postgresql.org/pgsql-jdbc/2005-01/msg00254.php">ref</link>
      </action>
      <action>
        Add a URL parameter to make the driver not force a rollback on error
	for compatibility with other dbs.  The driver can wrap each
	statement in a Savepoint.
	<link href="http://archives.postgresql.org/pgsql-jdbc/2005-01/msg00131.php">ref</link>
      </action>
      <action>
        Combine DatabaseMetaData efforts with pl/java.
	<link href="http://archives.postgresql.org/pgsql-jdbc/2005-02/msg00063.php">ref</link>
      </action>
      <action>
        ResultSetMetaData calls that run queries are cached on a per column
	basis, but it seems likely that they're going to be called for all
	columns, so try to issue one query per ResultSet, not per column.
      </action>
      <action>
        Make PGConnection, PGStatement, ... extend java.sql.XXX
	<link href="http://archives.postgresql.org/pgsql-jdbc/2005-01/msg00223.php">ref</link>
      </action>
    </actions>

    <actions priority="Documentation">
      <action>
        The PGResultSetMetaData interface is not mentioned.
      </action>
      <action>
        Timestamp +/- Infinity values are not mentioned.
      </action>
      <action>
      	Async notifies are more async now.
	<link href="http://archives.postgresql.org/pgsql-jdbc/2005-04/msg00056.php">ref</link>
      </action>
    </actions>

    <actions priority="Website">
      <action context="">
        Setup a cron job somewhere to build and deploy the sight on a daily
	basis to keep API changes and translations up to date.
      </action>
      <action context="">
        Add a daily cvs snapshot build to make the latest updates available.
      </action>
    </actions>
  </todo>

</status>
